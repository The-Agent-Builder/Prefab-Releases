name: Deploy on Merge - Trigger Factory Deployment

# 当 PR 合并到 main 时触发部署
on:
  push:
    branches:
      - main
    paths:
      - 'community-prefabs.json'

jobs:
  trigger-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2  # 获取最近两次提交以便对比

      - name: Extract changed entry
        id: extract
        run: |
          # 获取上一次提交的文件
          git show HEAD~1:community-prefabs.json > old.json 2>/dev/null || echo '[]' > old.json
          git show HEAD:community-prefabs.json > new.json

          # 使用 Python 找出新增或修改的条目
          python3 << 'PYTHON_SCRIPT'
          import json
          import sys

          with open('old.json') as f:
              old_data = json.load(f)
          with open('new.json') as f:
              new_data = json.load(f)

          old_dict = {(item['id'], item['version']): item for item in old_data}
          new_dict = {(item['id'], item['version']): item for item in new_data}

          # 找出新增或修改的条目
          changed = []
          for key, item in new_dict.items():
              if key not in old_dict or item != old_dict[key]:
                  changed.append(item)

          if not changed:
              print("No changes detected")
              sys.exit(0)

          if len(changed) > 1:
              print(f"Warning: Multiple changes detected ({len(changed)}), deploying all:")
              for item in changed:
                  print(f"  - {item['id']}@{item['version']}")

          # 输出到 GitHub Actions
          import os
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"changed_entries={json.dumps(changed)}\n")
              f.write(f"has_changes={'true' if changed else 'false'}\n")
          PYTHON_SCRIPT

      - name: Trigger deployment
        if: steps.extract.outputs.has_changes == 'true'
        env:
          FACTORY_URL: ${{ secrets.FACTORY_DEPLOY_URL }}
          WEBHOOK_SECRET: ${{ secrets.FACTORY_WEBHOOK_SECRET }}
        run: |
          # 读取变更的条目
          CHANGED_ENTRIES='${{ steps.extract.outputs.changed_entries }}'

          # 遍历每个变更的条目并触发部署
          echo "$CHANGED_ENTRIES" | python3 << 'PYTHON_SCRIPT'
          import json
          import hmac
          import hashlib
          import os
          import sys
          import http.client
          from urllib.parse import urlparse

          changed_entries = json.loads(sys.stdin.read())
          factory_url = os.environ.get('FACTORY_URL')
          webhook_secret = os.environ.get('WEBHOOK_SECRET', '')

          if not factory_url:
              print("::error::FACTORY_DEPLOY_URL secret is not set")
              sys.exit(1)

          # 解析 URL
          parsed = urlparse(factory_url)
          host = parsed.netloc
          path = parsed.path or '/v1/deploy'

          for entry in changed_entries:
              # 构造请求负载
              payload = {
                  "event_source": "prefab-releases",
                  "event_type": "prefab_merged",
                  "prefab": {
                      "id": entry['id'],
                      "version": entry['version'],
                      "author": entry['author'],
                      "repo_url": entry['repo_url']
                  }
              }

              payload_bytes = json.dumps(payload).encode('utf-8')

              # 计算签名
              headers = {
                  'Content-Type': 'application/json',
              }

              if webhook_secret:
                  mac = hmac.new(
                      webhook_secret.encode(),
                      msg=payload_bytes,
                      digestmod=hashlib.sha256
                  )
                  headers['X-Hub-Signature-256'] = f"sha256={mac.hexdigest()}"

              # 发送请求
              try:
                  if parsed.scheme == 'https':
                      conn = http.client.HTTPSConnection(host, timeout=30)
                  else:
                      conn = http.client.HTTPConnection(host, timeout=30)

                  conn.request('POST', path, body=payload_bytes, headers=headers)
                  response = conn.getresponse()
                  response_data = response.read().decode('utf-8')

                  if response.status in (200, 202):
                      print(f"✅ Deployment triggered for {entry['id']}@{entry['version']}")
                      print(f"Response: {response_data}")
                  else:
                      print(f"::error::Failed to deploy {entry['id']}@{entry['version']}")
                      print(f"Status: {response.status}")
                      print(f"Response: {response_data}")
                      sys.exit(1)

              except Exception as e:
                  print(f"::error::Exception deploying {entry['id']}@{entry['version']}: {e}")
                  sys.exit(1)
              finally:
                  conn.close()

          print(f"✅ All {len(changed_entries)} deployment(s) triggered successfully")
          PYTHON_SCRIPT

      - name: No changes detected
        if: steps.extract.outputs.has_changes != 'true'
        run: |
          echo "ℹ️  No new or modified prefab entries detected in this push"

